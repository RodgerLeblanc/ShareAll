/*
 * Copyright (c) 2011-2014 BlackBerry Limited.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "applicationui.hpp"
#include "src/Settings/Settings.h"
#include "bbm/BBMHandler.hpp"
#include "activeFrameQML.h"

#include <bb/cascades/Application>
#include <bb/cascades/QmlDocument>
#include <bb/cascades/AbstractPane>
#include <bb/cascades/LocaleHandler>
#include <bb/system/SystemPrompt>
#include <bb/system/SystemToast>
#include <bb/system/SystemUiButton>
#include <bb/cascades/AbstractCover>
#include <QUrl>
#include <bb/system/InvokeManager>
#include <QList>
#include <QTimer>
#include <bb/cascades/InvokeQuery>
#include <bb/cascades/Invocation>
#include <bb/cascades/Page>
#include <bb/cascades/MultiSelectHandler>

using namespace bb::cascades;
using namespace bb::system;


ApplicationUI::ApplicationUI(bb::cascades::Application *app) :
        QObject(app),
        settings(new Settings(this))
{
    // prepare the localization
    m_pTranslator = new QTranslator(this);
    m_pLocaleHandler = new LocaleHandler(this);

    fileSaver = new FileSaver();

    bool res = QObject::connect(m_pLocaleHandler, SIGNAL(systemLanguageChanged()), this, SLOT(onSystemLanguageChanged()));
    // This is only available in Debug builds
    Q_ASSERT(res);
    // Since the variable is not used in the app, this is added to avoid a
    // compiler warning
    Q_UNUSED(res);

    // initial load
    onSystemLanguageChanged();

    //Kick off BBM Registration.
           //TODO: Define your own UUID here. You can generate one here: http://www.guidgenerator.com/
           const QString uuid(QLatin1String("c67ec369-da31-4d75-a622-7b9a9f1b5081"));
           BBMHandler *bbmHandler = new BBMHandler(uuid, app);
           bbmHandler->registerApplication();


    // Create scene document from main.qml asset, the parent is set
    // to ensure the document gets destroyed properly at shut down.
    QmlDocument *qml = QmlDocument::create("asset:///main.qml").parent(this);
    qml->setContextProperty("_fileSaver", fileSaver);
    qml->setContextProperty("_settings", settings);

    qml->setContextProperty("bbmHandler", bbmHandler);
            //Expose the ApplicationUI in main.qml
            qml->setContextProperty("app", this);

            QString m_homeDir = QDir::homePath() + "/../app/native";
               QmlDocument::defaultDeclarativeEngine()->rootContext()->setContextProperty("homeDir",m_homeDir);

            // Create Active Frame (shown when app is miminized)
                   ActiveFrameQML *activeFrame = new ActiveFrameQML();
                   Application::instance()->setCover(activeFrame);
    // Create root object for the UI
    AbstractPane *root = qml->createRootObject<AbstractPane>();

    // Set created root object as the application scene
    Application::instance()->setScene(root);
}

void ApplicationUI::onSystemLanguageChanged()
{
    QCoreApplication::instance()->removeTranslator(m_pTranslator);
    // Initiate, load and install the application translation files.
    QString locale_string = QLocale().name();
    QString file_name = QString("MyText_%1").arg(locale_string);
    if (m_pTranslator->load(file_name, "app/native/qm")) {
        QCoreApplication::instance()->installTranslator(m_pTranslator);
    }
}








QByteArray ApplicationUI::encodeQString(const QString& toEncode) const {
    return toEncode.toUtf8();
}

bool ApplicationUI::copyToClipboard(const QString& url)
{
    clipboard.insert("text/plain", url.toAscii());
    return (clipboard.value("text/plain") == url);
}
